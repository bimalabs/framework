// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	handlers "github.com/bimalabs/framework/v4/handlers"
	mock "github.com/stretchr/testify/mock"

	paginations "github.com/bimalabs/framework/v4/paginations"

	utils "github.com/bimalabs/framework/v4/utils"
)

// Module is an autogenerated mock type for the Module type
type Module struct {
	mock.Mock
}

// Cache provides a mock function with given fields:
func (_m *Module) Cache() *utils.Cache {
	ret := _m.Called()

	var r0 *utils.Cache
	if rf, ok := ret.Get(0).(func() *utils.Cache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Cache)
		}
	}

	return r0
}

// Debug provides a mock function with given fields:
func (_m *Module) Debug() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Handler provides a mock function with given fields:
func (_m *Module) Handler() handlers.Handler {
	ret := _m.Called()

	var r0 handlers.Handler
	if rf, ok := ret.Get(0).(func() handlers.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handlers.Handler)
		}
	}

	return r0
}

// Paginator provides a mock function with given fields:
func (_m *Module) Paginator() *paginations.Pagination {
	ret := _m.Called()

	var r0 *paginations.Pagination
	if rf, ok := ret.Get(0).(func() *paginations.Pagination); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paginations.Pagination)
		}
	}

	return r0
}

type mockConstructorTestingTNewModule interface {
	mock.TestingT
	Cleanup(func())
}

// NewModule creates a new instance of Module. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewModule(t mockConstructorTestingTNewModule) *Module {
	mock := &Module{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
